build:
    box: 
        id: fra.ocir.io/oracsmnorthuk/boatrec-adw-base
        username: $DOCKER_USERNAME
        password: $DOCKER_PASSWORD
        tag: 1.0
      
    steps:

    - npm-install
    
    # Take our tested application revision and its dependencies, bake it in to a
    # Docker image, and push to OCIR.
    - internal/docker-push:
            cmd: node server.js
            working-dir: $WERCKER_ROOT
            tag: $WERCKER_GIT_COMMIT
            ports: "3000"
            username: $DOCKER_USERNAME
            password: $DOCKER_PASSWORD
            repository: $DOCKER_REPO
            registry: https://fra.ocir.io/v2
            env: TNS_ADMIN=/usr/lib/oracle/18.3/client64/lib/wallets

deploy-to-kubernetes:
    box:
        id: fra.ocir.io/oracsmnorthuk/boatrec-admin
        username: $DOCKER_USERNAME
        password: $DOCKER_PASSWORD
        tag: $WERCKER_GIT_COMMIT
    steps:

    # https://github.com/wercker/step-bash-template
    # This Wercker step will look for files in our repo with a .template extension.
    # It will expand any environment variables in those files, then remove the
    # template extension.
    - bash-template

    # The step above should leave us with a Kubernetes service and deployment yml files.
    # We'll create a directory to move them to.
    - script:
        name: Prepare Kubernetes files
        code: |
          mkdir $WERCKER_OUTPUT_DIR/kubernetes
          mv kube_*.yml $WERCKER_OUTPUT_DIR/kubernetes

    # `apply` is a good command to use here, as it'll create Kubernetes entities if they are missing.
    - kubectl:
        name: deploy to kubernetes
        server: $OKE_MASTER
        token: $OKE_TOKEN
        insecure-skip-tls-verify: true
        command: apply -f $WERCKER_OUTPUT_DIR/kubernetes/
